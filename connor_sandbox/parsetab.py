
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '8B3E426CCE6C955FC75729F3F9E56D94'
    
_lr_action_items = {'*':([16,18,20,21,22,23,24,25,33,34,35,36,37,],[-17,-16,28,-18,28,28,-14,28,-15,28,-12,28,-13,]),'COUT':([0,],[1,]),'SEMICOLON':([11,16,18,20,21,22,23,24,33,34,35,36,37,],[15,-17,-16,26,-18,31,32,-14,-15,-10,-12,-11,-13,]),'INT':([0,],[3,]),'DOUBLE':([0,],[2,]),'+':([16,18,20,21,22,23,24,25,33,34,35,36,37,],[-17,-16,27,-18,27,27,-14,27,-15,-10,-12,-11,-13,]),'FLOAT':([0,],[4,]),'CHARACTER':([12,13,14,17,19,27,28,29,30,],[16,16,16,16,16,16,16,16,16,]),'NUMBER':([12,13,14,17,19,27,28,29,30,],[18,18,18,18,18,18,18,18,18,]),'/':([16,18,20,21,22,23,24,25,33,34,35,36,37,],[-17,-16,30,-18,30,30,-14,30,-15,30,-12,30,-13,]),'<':([1,10,],[10,13,]),'CHAR':([0,],[5,]),')':([16,18,21,24,25,33,34,35,36,37,],[-17,-16,-18,-14,33,-15,-10,-12,-11,-13,]),'BOOL':([0,],[6,]),'-':([12,13,14,16,17,18,19,20,21,22,23,24,25,27,28,29,30,33,34,35,36,37,],[17,17,17,-17,17,-16,17,29,-18,29,29,-14,29,17,17,17,17,-15,-10,-12,-11,-13,]),'(':([12,13,14,17,19,27,28,29,30,],[19,19,19,19,19,19,19,19,19,]),'=':([9,11,],[12,14,]),'ID':([0,2,3,4,5,6,8,12,13,14,17,19,27,28,29,30,],[9,-6,-5,-7,-8,-9,11,21,21,21,21,21,21,21,21,21,]),'$end':([7,15,26,31,32,],[0,-4,-1,-3,-2,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([12,13,14,17,19,27,28,29,30,],[20,22,23,24,25,34,35,36,37,]),'statement':([0,],[7,]),'declaration':([0,],[8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> ID = expression SEMICOLON','statement',4,'p_statement_assign','inter.py',75),
  ('statement -> declaration ID = expression SEMICOLON','statement',5,'p_statement_declr_assign','inter.py',81),
  ('statement -> COUT < < expression SEMICOLON','statement',5,'p_statement_cout','inter.py',87),
  ('statement -> declaration ID SEMICOLON','statement',3,'p_statement_declr','inter.py',92),
  ('declaration -> INT','declaration',1,'p_declaration_var','inter.py',98),
  ('declaration -> DOUBLE','declaration',1,'p_declaration_var','inter.py',99),
  ('declaration -> FLOAT','declaration',1,'p_declaration_var','inter.py',100),
  ('declaration -> CHAR','declaration',1,'p_declaration_var','inter.py',101),
  ('declaration -> BOOL','declaration',1,'p_declaration_var','inter.py',102),
  ('expression -> expression + expression','expression',3,'p_expression_binop','inter.py',107),
  ('expression -> expression - expression','expression',3,'p_expression_binop','inter.py',108),
  ('expression -> expression * expression','expression',3,'p_expression_binop','inter.py',109),
  ('expression -> expression / expression','expression',3,'p_expression_binop','inter.py',110),
  ('expression -> - expression','expression',2,'p_expression_uminus','inter.py',118),
  ('expression -> ( expression )','expression',3,'p_expression_group','inter.py',123),
  ('expression -> NUMBER','expression',1,'p_expression_number','inter.py',128),
  ('expression -> CHARACTER','expression',1,'p_expression_character','inter.py',133),
  ('expression -> ID','expression',1,'p_expression_id','inter.py',138),
]
