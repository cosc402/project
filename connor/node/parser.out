Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> s
Rule 1     s -> e
Rule 2     e -> e + t
Rule 3     e -> e - t
Rule 4     e -> t
Rule 5     t -> ( e )
Rule 6     t -> ID
Rule 7     t -> NUM

Terminals, with rules where they appear

(                    : 5
)                    : 5
+                    : 2
-                    : 3
ID                   : 6
NUM                  : 7
error                : 

Nonterminals, with rules where they appear

e                    : 1 2 3 5
s                    : 0
t                    : 2 3 4

Parsing method: LALR

state 0

    (0) S' -> . s
    (1) s -> . e
    (2) e -> . e + t
    (3) e -> . e - t
    (4) e -> . t
    (5) t -> . ( e )
    (6) t -> . ID
    (7) t -> . NUM

    (               shift and go to state 2
    ID              shift and go to state 6
    NUM             shift and go to state 4

    s                              shift and go to state 3
    e                              shift and go to state 1
    t                              shift and go to state 5

state 1

    (1) s -> e .
    (2) e -> e . + t
    (3) e -> e . - t

    $end            reduce using rule 1 (s -> e .)
    +               shift and go to state 8
    -               shift and go to state 7


state 2

    (5) t -> ( . e )
    (2) e -> . e + t
    (3) e -> . e - t
    (4) e -> . t
    (5) t -> . ( e )
    (6) t -> . ID
    (7) t -> . NUM

    (               shift and go to state 2
    ID              shift and go to state 6
    NUM             shift and go to state 4

    e                              shift and go to state 9
    t                              shift and go to state 5

state 3

    (0) S' -> s .



state 4

    (7) t -> NUM .

    +               reduce using rule 7 (t -> NUM .)
    -               reduce using rule 7 (t -> NUM .)
    $end            reduce using rule 7 (t -> NUM .)
    )               reduce using rule 7 (t -> NUM .)


state 5

    (4) e -> t .

    +               reduce using rule 4 (e -> t .)
    -               reduce using rule 4 (e -> t .)
    $end            reduce using rule 4 (e -> t .)
    )               reduce using rule 4 (e -> t .)


state 6

    (6) t -> ID .

    +               reduce using rule 6 (t -> ID .)
    -               reduce using rule 6 (t -> ID .)
    $end            reduce using rule 6 (t -> ID .)
    )               reduce using rule 6 (t -> ID .)


state 7

    (3) e -> e - . t
    (5) t -> . ( e )
    (6) t -> . ID
    (7) t -> . NUM

    (               shift and go to state 2
    ID              shift and go to state 6
    NUM             shift and go to state 4

    t                              shift and go to state 10

state 8

    (2) e -> e + . t
    (5) t -> . ( e )
    (6) t -> . ID
    (7) t -> . NUM

    (               shift and go to state 2
    ID              shift and go to state 6
    NUM             shift and go to state 4

    t                              shift and go to state 11

state 9

    (5) t -> ( e . )
    (2) e -> e . + t
    (3) e -> e . - t

    )               shift and go to state 12
    +               shift and go to state 8
    -               shift and go to state 7


state 10

    (3) e -> e - t .

    +               reduce using rule 3 (e -> e - t .)
    -               reduce using rule 3 (e -> e - t .)
    $end            reduce using rule 3 (e -> e - t .)
    )               reduce using rule 3 (e -> e - t .)


state 11

    (2) e -> e + t .

    +               reduce using rule 2 (e -> e + t .)
    -               reduce using rule 2 (e -> e + t .)
    $end            reduce using rule 2 (e -> e + t .)
    )               reduce using rule 2 (e -> e + t .)


state 12

    (5) t -> ( e ) .

    +               reduce using rule 5 (t -> ( e ) .)
    -               reduce using rule 5 (t -> ( e ) .)
    $end            reduce using rule 5 (t -> ( e ) .)
    )               reduce using rule 5 (t -> ( e ) .)

