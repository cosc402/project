
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '288731E3E3710E14664D332E384DAEC6'
    
_lr_action_items = {'DO':([3,14,21,28,32,41,43,46,52,74,77,78,79,80,87,112,120,132,133,137,148,151,152,154,155,156,],[-26,21,21,-39,-27,-26,-38,-6,-36,-28,-35,-34,21,-18,-37,-25,21,21,-7,-31,-29,21,-32,-30,21,-33,]),'RETURN':([3,14,21,28,32,41,43,46,52,74,77,78,79,80,87,112,120,132,133,137,148,151,152,154,155,156,],[-26,22,22,-39,-27,-26,-38,-6,-36,-28,-35,-34,22,-18,-37,-25,22,22,-7,-31,-29,22,-32,-30,22,-33,]),'MODEQ':([31,33,131,],[58,-76,-77,]),'CHAR':([0,2,10,12,15,18,42,46,80,82,133,],[-2,8,-5,-3,-4,8,-17,-6,8,8,-7,]),'SUBEQ':([31,33,131,],[59,-76,-77,]),'WHILE':([3,14,21,28,32,41,43,46,51,52,74,77,78,79,80,87,112,120,132,133,137,148,151,152,154,155,156,],[-26,23,23,-39,-27,-26,-38,-6,86,-36,-28,-35,-34,23,-18,-37,-25,23,23,-7,-31,-29,23,-32,-30,23,-33,]),'LSHIFT':([26,27,29,31,33,35,39,40,53,55,56,75,76,90,91,92,94,95,96,97,98,99,100,101,103,105,106,107,108,109,110,111,129,131,139,140,141,142,143,144,147,],[-75,-80,-79,-73,-76,72,-81,-78,72,72,-72,-71,-76,72,-74,72,72,72,72,72,72,72,-69,72,72,-66,-62,-64,-63,-65,-67,-68,-70,-77,72,72,72,72,72,72,72,]),'RSHIFT':([26,27,29,31,33,35,39,40,53,55,56,75,76,90,91,92,94,95,96,97,98,99,100,101,103,105,106,107,108,109,110,111,129,131,139,140,141,142,143,144,147,],[-75,-80,-79,-73,-76,73,-81,-78,73,73,-72,-71,-76,73,-74,73,73,73,73,73,73,73,-69,73,73,-66,-62,-64,-63,-65,-67,-68,-70,-77,73,73,73,73,73,73,73,]),'NEQ':([26,27,29,31,33,39,40,56,75,76,90,91,94,95,96,97,98,99,100,105,106,107,108,109,110,111,129,131,],[-75,-80,-79,-73,-76,-81,-78,-72,-71,-76,127,-74,-61,-58,-59,-57,-56,-60,-69,-66,-62,-64,-63,-65,-67,-68,-70,-77,]),'!':([54,66,88,117,119,121,128,],[88,88,88,88,88,88,88,]),'GEQ':([26,27,29,31,33,39,40,56,75,76,90,91,94,95,96,97,98,99,100,105,106,107,108,109,110,111,129,131,],[-75,-80,-79,-73,-76,-81,-78,-72,-71,-76,122,-74,-61,-58,-59,-57,-56,-60,-69,-66,-62,-64,-63,-65,-67,-68,-70,-77,]),'LAND':([26,27,29,31,33,39,40,56,75,76,89,90,91,94,95,96,97,98,99,100,104,105,106,107,108,109,110,111,118,129,131,135,136,138,139,140,141,142,143,144,145,],[-75,-80,-79,-73,-76,-81,-78,-72,-71,-76,119,-51,-74,-61,-58,-59,-57,-56,-60,-69,119,-66,-62,-64,-63,-65,-67,-68,-50,-70,-77,119,-48,119,-45,-44,-47,-42,-46,-43,119,]),'%':([26,27,29,31,33,35,39,40,53,55,56,75,76,90,91,92,94,95,96,97,98,99,100,101,103,105,106,107,108,109,110,111,129,131,139,140,141,142,143,144,147,],[-75,-80,-79,-73,-76,67,-81,-78,67,67,-72,-71,-76,67,-74,67,67,67,67,67,67,67,-69,67,67,-66,67,-64,67,-65,67,67,-70,-77,67,67,67,67,67,67,67,]),'&':([3,14,21,22,24,25,28,32,41,43,46,52,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,87,88,112,117,119,120,121,122,123,124,125,126,127,128,130,132,133,137,148,150,151,152,154,155,156,],[-26,36,36,36,36,36,-39,-27,-26,-38,-6,-36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-28,-35,-34,36,-18,-37,36,-25,36,36,36,36,36,36,36,36,36,36,36,36,36,-7,-31,-29,36,36,-32,-30,36,-33,]),')':([18,26,27,29,31,33,39,40,45,48,55,56,64,75,76,83,84,89,90,91,92,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,116,118,129,131,134,135,136,138,139,140,141,142,143,144,147,150,153,],[47,-75,-80,-79,-73,-76,-81,-78,-10,81,91,-72,100,-71,-76,-23,-11,120,-51,-74,-55,-61,-58,-59,-57,-56,-60,-69,-52,129,132,-66,-62,-64,-63,-65,-67,-68,-12,-50,-70,-77,-24,149,-48,-49,-45,-44,-47,-42,-46,-43,-53,-54,155,]),'(':([3,5,7,14,20,21,22,23,24,25,28,30,32,33,34,41,43,46,52,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,86,87,88,112,117,119,120,121,122,123,124,125,126,127,128,130,132,133,137,148,150,151,152,154,155,156,],[-26,18,-20,24,-19,24,24,54,24,24,-39,57,-27,64,66,-26,-38,-6,-36,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-28,-35,-34,24,-18,117,-37,24,-25,24,24,24,24,24,24,24,24,24,24,24,24,24,-7,-31,-29,24,24,-32,-30,24,-33,]),'+':([26,27,29,31,33,35,39,40,53,55,56,75,76,90,91,92,94,95,96,97,98,99,100,101,103,105,106,107,108,109,110,111,129,131,139,140,141,142,143,144,147,],[-75,-80,-79,-73,-76,68,-81,-78,68,68,-72,-71,-76,68,-74,68,68,68,68,68,68,68,-69,68,68,-66,-62,-64,-63,-65,68,68,-70,-77,68,68,68,68,68,68,68,]),'*':([26,27,29,31,33,35,39,40,53,55,56,75,76,90,91,92,94,95,96,97,98,99,100,101,103,105,106,107,108,109,110,111,129,131,139,140,141,142,143,144,147,],[-75,-80,-79,-73,-76,69,-81,-78,69,69,-72,-71,-76,69,-74,69,69,69,69,69,69,69,-69,69,69,-66,69,-64,69,-65,69,69,-70,-77,69,69,69,69,69,69,69,]),'-':([3,14,21,22,24,25,26,27,28,29,31,32,33,35,39,40,41,43,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,90,91,92,94,95,96,97,98,99,100,101,103,105,106,107,108,109,110,111,112,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,137,139,140,141,142,143,144,147,148,150,151,152,154,155,156,],[-26,25,25,25,25,25,-75,-80,-39,-79,-73,-27,-76,70,-81,-78,-26,-38,-6,-36,70,25,70,-72,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-28,-71,-76,-35,-34,25,-18,-37,25,70,-74,70,70,70,70,70,70,70,-69,70,70,-66,-62,-64,-63,-65,70,70,-25,25,25,25,25,25,25,25,25,25,25,25,-70,25,-77,25,-7,-31,70,70,70,70,70,70,70,-29,25,25,-32,-30,25,-33,]),',':([4,19,20,26,27,29,31,33,39,40,44,45,48,56,75,76,83,84,91,94,95,96,97,98,99,100,101,102,105,106,107,108,109,110,111,113,116,129,131,134,147,],[16,-8,-10,-75,-80,-79,-73,-76,-81,-78,-9,-10,82,-72,-71,-76,-23,-11,-74,-61,-58,-59,-57,-56,-60,-69,-52,130,-66,-62,-64,-63,-65,-67,-68,16,-12,-70,-77,-24,-53,]),'/':([26,27,29,31,33,35,39,40,53,55,56,75,76,90,91,92,94,95,96,97,98,99,100,101,103,105,106,107,108,109,110,111,129,131,139,140,141,142,143,144,147,],[-75,-80,-79,-73,-76,71,-81,-78,71,71,-72,-71,-76,71,-74,71,71,71,71,71,71,71,-69,71,71,-66,71,-64,71,-65,71,71,-70,-77,71,71,71,71,71,71,71,]),'MULEQ':([31,33,131,],[60,-76,-77,]),'ADDEQ':([31,33,131,],[61,-76,-77,]),'CCON':([3,14,21,22,24,25,28,32,41,43,46,52,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,87,88,112,117,119,120,121,122,123,124,125,126,127,128,130,132,133,137,148,150,151,152,154,155,156,],[-26,27,27,27,27,27,-39,-27,-26,-38,-6,-36,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-28,-35,-34,27,-18,-37,27,-25,27,27,27,27,27,27,27,27,27,27,27,27,27,-7,-31,-29,27,27,-32,-30,27,-33,]),';':([3,4,14,19,20,21,22,26,27,28,29,31,32,33,35,37,38,39,40,41,43,44,45,46,52,53,56,57,74,75,76,77,78,79,80,84,87,90,91,92,93,94,95,96,97,98,99,100,105,106,107,108,109,110,111,112,113,116,118,120,128,129,131,132,133,136,137,138,139,140,141,142,143,144,145,146,148,149,151,152,154,155,156,],[-26,15,28,-8,-10,28,52,-75,-80,-39,-79,-73,-27,-76,74,77,78,-81,-78,-26,-38,-9,-10,-6,-36,87,-72,-54,-28,-71,-76,-35,-34,28,-18,-11,-37,-51,-74,-55,128,-61,-58,-59,-57,-56,-60,-69,-66,-62,-64,-63,-65,-67,-68,-25,133,-12,-50,28,-40,-70,-77,28,-7,-48,-31,-49,-45,-44,-47,-42,-46,-43,-41,150,-29,152,28,-32,-30,28,-33,]),'IF':([3,14,21,28,32,41,43,46,52,74,77,78,79,80,87,112,120,132,133,137,148,151,152,154,155,156,],[-26,34,34,-39,-27,-26,-38,-6,-36,-28,-35,-34,34,-18,-37,-25,34,34,-7,-31,-29,34,-32,-30,34,-33,]),'=':([31,33,131,],[62,-76,-77,]),'<':([26,27,29,31,33,39,40,56,75,76,90,91,94,95,96,97,98,99,100,105,106,107,108,109,110,111,129,131,],[-75,-80,-79,-73,-76,-81,-78,-72,-71,-76,126,-74,-61,-58,-59,-57,-56,-60,-69,-66,-62,-64,-63,-65,-67,-68,-70,-77,]),'DIVEQ':([31,33,131,],[63,-76,-77,]),'$end':([0,1,2,10,12,15,42,],[-2,0,-1,-5,-3,-4,-17,]),'FOR':([3,14,21,28,32,41,43,46,52,74,77,78,79,80,87,112,120,132,133,137,148,151,152,154,155,156,],[-26,30,30,-39,-27,-26,-38,-6,-36,-28,-35,-34,30,-18,-37,-25,30,30,-7,-31,-29,30,-32,-30,30,-33,]),'ELSE':([28,43,52,74,77,78,87,112,137,148,152,154,156,],[-39,-38,-36,-28,-35,-34,-37,-25,-31,151,-32,-30,-33,]),'[':([20,33,45,76,],[50,65,50,65,]),']':([26,27,29,31,33,39,40,50,56,75,76,85,91,94,95,96,97,98,99,100,103,105,106,107,108,109,110,111,129,131,],[-75,-80,-79,-73,-76,-81,-78,84,-72,-71,-76,116,-74,-61,-58,-59,-57,-56,-60,-69,131,-66,-62,-64,-63,-65,-67,-68,-70,-77,]),'ID':([0,2,3,6,8,9,10,11,12,13,14,15,16,21,22,24,25,28,32,36,41,42,43,46,49,52,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,87,88,112,114,115,117,119,120,121,122,123,124,125,126,127,128,130,132,133,137,148,150,151,152,154,155,156,],[-2,7,-26,-14,-13,-16,-5,-15,-3,20,33,-4,45,33,33,33,33,-39,-27,76,-26,-17,-38,-6,45,-36,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-28,-35,-34,33,-18,-37,33,-25,45,45,33,33,33,33,33,33,33,33,33,33,33,33,33,-7,-31,-29,33,33,-32,-30,33,-33,]),'ICON':([3,14,21,22,24,25,28,32,41,43,46,50,52,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,87,88,112,117,119,120,121,122,123,124,125,126,127,128,130,132,133,137,148,150,151,152,154,155,156,],[-26,29,29,29,29,29,-39,-27,-26,-38,-6,85,-36,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-28,-35,-34,29,-18,-37,29,-25,29,29,29,29,29,29,29,29,29,29,29,29,29,-7,-31,-29,29,29,-32,-30,29,-33,]),'LOR':([26,27,29,31,33,39,40,56,75,76,89,90,91,94,95,96,97,98,99,100,104,105,106,107,108,109,110,111,118,129,131,135,136,138,139,140,141,142,143,144,145,],[-75,-80,-79,-73,-76,-81,-78,-72,-71,-76,121,-51,-74,-61,-58,-59,-57,-56,-60,-69,121,-66,-62,-64,-63,-65,-67,-68,-50,-70,-77,121,-48,-49,-45,-44,-47,-42,-46,-43,121,]),'EQ':([26,27,29,31,33,39,40,56,75,76,90,91,94,95,96,97,98,99,100,105,106,107,108,109,110,111,129,131,],[-75,-80,-79,-73,-76,-81,-78,-72,-71,-76,125,-74,-61,-58,-59,-57,-56,-60,-69,-66,-62,-64,-63,-65,-67,-68,-70,-77,]),'INT':([0,2,10,12,15,18,42,46,80,82,133,],[-2,9,-5,-3,-4,9,-17,-6,9,9,-7,]),'DOUBLE':([0,2,10,12,15,18,42,46,80,82,133,],[-2,11,-5,-3,-4,11,-17,-6,11,11,-7,]),'FLOAT':([0,2,10,12,15,18,42,46,80,82,133,],[-2,6,-5,-3,-4,6,-17,-6,6,6,-7,]),'BREAK':([3,14,21,28,32,41,43,46,52,74,77,78,79,80,87,112,120,132,133,137,148,151,152,154,155,156,],[-26,37,37,-39,-27,-26,-38,-6,-36,-28,-35,-34,37,-18,-37,-25,37,37,-7,-31,-29,37,-32,-30,37,-33,]),'LEQ':([26,27,29,31,33,39,40,56,75,76,90,91,94,95,96,97,98,99,100,105,106,107,108,109,110,111,129,131,],[-75,-80,-79,-73,-76,-81,-78,-72,-71,-76,123,-74,-61,-58,-59,-57,-56,-60,-69,-66,-62,-64,-63,-65,-67,-68,-70,-77,]),'CONTINUE':([3,14,21,28,32,41,43,46,52,74,77,78,79,80,87,112,120,132,133,137,148,151,152,154,155,156,],[-26,38,38,-39,-27,-26,-38,-6,-36,-28,-35,-34,38,-18,-37,-25,38,38,-7,-31,-29,38,-32,-30,38,-33,]),'SCON':([3,14,21,22,24,25,28,32,41,43,46,52,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,87,88,112,117,119,120,121,122,123,124,125,126,127,128,130,132,133,137,148,150,151,152,154,155,156,],[-26,40,40,40,40,40,-39,-27,-26,-38,-6,-36,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-28,-35,-34,40,-18,-37,40,-25,40,40,40,40,40,40,40,40,40,40,40,40,40,-7,-31,-29,40,40,-32,-30,40,-33,]),'{':([3,14,17,21,28,32,41,43,46,47,52,74,77,78,79,80,81,87,112,120,132,133,137,148,151,152,154,155,156,],[-26,41,46,41,-39,-27,-26,-38,-6,-21,-36,-28,-35,-34,41,-18,-22,-37,-25,41,41,-7,-31,-29,41,-32,-30,41,-33,]),'>':([26,27,29,31,33,39,40,56,75,76,90,91,94,95,96,97,98,99,100,105,106,107,108,109,110,111,129,131,],[-75,-80,-79,-73,-76,-81,-78,-72,-71,-76,124,-74,-61,-58,-59,-57,-56,-60,-69,-66,-62,-64,-63,-65,-67,-68,-70,-77,]),'}':([3,14,28,32,41,43,46,52,74,77,78,79,80,87,112,133,137,148,152,154,156,],[-26,42,-39,-27,-26,-38,-6,-36,-28,-35,-34,112,-18,-37,-25,-7,-31,-29,-32,-30,-33,]),'FCON':([3,14,21,22,24,25,28,32,41,43,46,52,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,87,88,112,117,119,120,121,122,123,124,125,126,127,128,130,132,133,137,148,150,151,152,154,155,156,],[-26,39,39,39,39,39,-39,-27,-26,-38,-6,-36,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-28,-35,-34,39,-18,-37,39,-25,39,39,39,39,39,39,39,39,39,39,39,39,39,-7,-31,-29,39,39,-32,-30,39,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'constant':([14,21,22,24,25,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,117,119,120,121,122,123,124,125,126,127,128,130,132,150,151,155,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'fargs':([5,],[17,]),'stmts':([3,41,],[14,79,]),'fname':([2,],[5,]),'prog':([0,],[1,]),'type':([2,18,80,82,],[13,49,114,115,]),'fhead':([2,],[3,]),'dcl':([2,80,],[4,113,]),'args':([18,],[48,]),'lval':([14,21,22,24,25,36,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,117,119,120,121,122,123,124,125,126,127,128,130,132,150,151,155,],[31,31,31,31,31,75,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'stmt':([14,21,79,120,132,151,155,],[32,51,32,137,148,154,156,]),'func':([2,],[10,]),'extern':([2,],[12,]),'cexpr':([54,66,88,117,119,121,128,],[89,104,118,135,136,138,145,]),'expr':([14,21,22,24,25,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,117,119,120,121,122,123,124,125,126,127,128,130,132,150,151,155,],[35,35,53,55,56,90,92,94,95,96,97,98,99,101,103,90,105,106,107,108,109,110,111,35,90,90,90,35,90,139,140,141,142,143,144,90,147,35,92,35,35,]),'expro':([57,150,],[93,153,]),'externs':([0,],[2,]),'exprs':([64,],[102,]),'cexpro':([128,],[146,]),'dcls':([46,],[80,]),'dclr':([13,16,49,114,115,],[19,44,83,19,134,]),'block':([14,21,79,120,132,151,155,],[43,43,43,43,43,43,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> externs','prog',1,'p_prog','csemparser.py',32),
  ('externs -> <empty>','externs',0,'p_externs','csemparser.py',38),
  ('externs -> externs extern','externs',2,'p_externs','csemparser.py',39),
  ('extern -> dcl ;','extern',2,'p_extern','csemparser.py',44),
  ('extern -> func','extern',1,'p_extern','csemparser.py',45),
  ('dcls -> <empty>','dcls',0,'p_dcls','csemparser.py',50),
  ('dcls -> dcls dcl ;','dcls',3,'p_dcls','csemparser.py',51),
  ('dcl -> type dclr','dcl',2,'p_dcl','csemparser.py',56),
  ('dcl -> dcl , dclr','dcl',3,'p_dcl','csemparser.py',57),
  ('dclr -> ID','dclr',1,'p_dclr','csemparser.py',62),
  ('dclr -> ID [ ]','dclr',3,'p_dclr','csemparser.py',63),
  ('dclr -> ID [ ICON ]','dclr',4,'p_dclr','csemparser.py',64),
  ('type -> CHAR','type',1,'p_type','csemparser.py',69),
  ('type -> FLOAT','type',1,'p_type','csemparser.py',70),
  ('type -> DOUBLE','type',1,'p_type','csemparser.py',71),
  ('type -> INT','type',1,'p_type','csemparser.py',72),
  ('func -> fhead stmts }','func',3,'p_func','csemparser.py',77),
  ('fhead -> fname fargs { dcls','fhead',4,'p_fhead','csemparser.py',82),
  ('fname -> type ID','fname',2,'p_fname','csemparser.py',87),
  ('fname -> ID','fname',1,'p_fname','csemparser.py',88),
  ('fargs -> ( )','fargs',2,'p_fargs','csemparser.py',93),
  ('fargs -> ( args )','fargs',3,'p_fargs','csemparser.py',94),
  ('args -> type dclr','args',2,'p_args','csemparser.py',99),
  ('args -> args , type dclr','args',4,'p_args','csemparser.py',100),
  ('block -> { stmts }','block',3,'p_block','csemparser.py',105),
  ('stmts -> <empty>','stmts',0,'p_stmts','csemparser.py',110),
  ('stmts -> stmts stmt','stmts',2,'p_stmts','csemparser.py',111),
  ('stmt -> expr ;','stmt',2,'p_stmt','csemparser.py',116),
  ('stmt -> IF ( cexpr ) stmt','stmt',5,'p_stmt','csemparser.py',117),
  ('stmt -> IF ( cexpr ) stmt ELSE stmt','stmt',7,'p_stmt','csemparser.py',118),
  ('stmt -> WHILE ( cexpr ) stmt','stmt',5,'p_stmt','csemparser.py',119),
  ('stmt -> DO stmt WHILE ( cexpr ) ;','stmt',7,'p_stmt','csemparser.py',120),
  ('stmt -> FOR ( expro ; cexpro ; expro ) stmt','stmt',9,'p_stmt','csemparser.py',121),
  ('stmt -> CONTINUE ;','stmt',2,'p_stmt','csemparser.py',122),
  ('stmt -> BREAK ;','stmt',2,'p_stmt','csemparser.py',123),
  ('stmt -> RETURN ;','stmt',2,'p_stmt','csemparser.py',124),
  ('stmt -> RETURN expr ;','stmt',3,'p_stmt','csemparser.py',125),
  ('stmt -> block','stmt',1,'p_stmt','csemparser.py',126),
  ('stmt -> ;','stmt',1,'p_stmt','csemparser.py',127),
  ('cexpro -> <empty>','cexpro',0,'p_cexpro','csemparser.py',132),
  ('cexpro -> cexpr','cexpro',1,'p_cexpro','csemparser.py',133),
  ('cexpr -> expr EQ expr','cexpr',3,'p_cexpr','csemparser.py',138),
  ('cexpr -> expr NEQ expr','cexpr',3,'p_cexpr','csemparser.py',139),
  ('cexpr -> expr LEQ expr','cexpr',3,'p_cexpr','csemparser.py',140),
  ('cexpr -> expr GEQ expr','cexpr',3,'p_cexpr','csemparser.py',141),
  ('cexpr -> expr < expr','cexpr',3,'p_cexpr','csemparser.py',142),
  ('cexpr -> expr > expr','cexpr',3,'p_cexpr','csemparser.py',143),
  ('cexpr -> cexpr LAND cexpr','cexpr',3,'p_cexpr','csemparser.py',144),
  ('cexpr -> cexpr LOR cexpr','cexpr',3,'p_cexpr','csemparser.py',145),
  ('cexpr -> ! cexpr','cexpr',2,'p_cexpr','csemparser.py',146),
  ('cexpr -> expr','cexpr',1,'p_cexpr','csemparser.py',147),
  ('exprs -> expr','exprs',1,'p_exprs','csemparser.py',152),
  ('exprs -> exprs , expr','exprs',3,'p_exprs','csemparser.py',153),
  ('expro -> <empty>','expro',0,'p_expro','csemparser.py',158),
  ('expro -> expr','expro',1,'p_expro','csemparser.py',159),
  ('expr -> lval = expr','expr',3,'p_expr','csemparser.py',164),
  ('expr -> lval ADDEQ expr','expr',3,'p_expr','csemparser.py',165),
  ('expr -> lval SUBEQ expr','expr',3,'p_expr','csemparser.py',166),
  ('expr -> lval MULEQ expr','expr',3,'p_expr','csemparser.py',167),
  ('expr -> lval DIVEQ expr','expr',3,'p_expr','csemparser.py',168),
  ('expr -> lval MODEQ expr','expr',3,'p_expr','csemparser.py',169),
  ('expr -> expr + expr','expr',3,'p_expr','csemparser.py',170),
  ('expr -> expr - expr','expr',3,'p_expr','csemparser.py',171),
  ('expr -> expr * expr','expr',3,'p_expr','csemparser.py',172),
  ('expr -> expr / expr','expr',3,'p_expr','csemparser.py',173),
  ('expr -> expr % expr','expr',3,'p_expr','csemparser.py',174),
  ('expr -> expr LSHIFT expr','expr',3,'p_expr','csemparser.py',175),
  ('expr -> expr RSHIFT expr','expr',3,'p_expr','csemparser.py',176),
  ('expr -> ID ( )','expr',3,'p_expr','csemparser.py',177),
  ('expr -> ID ( exprs )','expr',4,'p_expr','csemparser.py',178),
  ('expr -> & lval','expr',2,'p_expr','csemparser.py',179),
  ('expr -> - expr','expr',2,'p_expr','csemparser.py',180),
  ('expr -> lval','expr',1,'p_expr','csemparser.py',181),
  ('expr -> ( expr )','expr',3,'p_expr','csemparser.py',182),
  ('expr -> constant','expr',1,'p_expr','csemparser.py',183),
  ('lval -> ID','lval',1,'p_lval','csemparser.py',188),
  ('lval -> ID [ expr ]','lval',4,'p_lval','csemparser.py',189),
  ('constant -> SCON','constant',1,'p_constant','csemparser.py',194),
  ('constant -> ICON','constant',1,'p_constant','csemparser.py',195),
  ('constant -> CCON','constant',1,'p_constant','csemparser.py',196),
  ('constant -> FCON','constant',1,'p_constant','csemparser.py',197),
]
