Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> ID = expression ;
Rule 2     statement -> declaration ID = expression ;
Rule 3     statement -> declaration ID = ' CHARACTER ' ;
Rule 4     statement -> declaration ID = " ID " ;
Rule 5     statement -> COUT out ;
Rule 6     out -> out out
Rule 7     out -> INSERT expression
Rule 8     statement -> declaration ID ;
Rule 9     declaration -> INT
Rule 10    declaration -> DOUBLE
Rule 11    declaration -> FLOAT
Rule 12    declaration -> CHAR
Rule 13    declaration -> BOOL
Rule 14    declaration -> STRING
Rule 15    expression -> expression + expression
Rule 16    expression -> expression - expression
Rule 17    expression -> expression * expression
Rule 18    expression -> expression / expression
Rule 19    expression -> expression % expression
Rule 20    expression -> - expression
Rule 21    expression -> ( expression )
Rule 22    expression -> NUM
Rule 23    expression -> CHARACTER
Rule 24    expression -> ID

Terminals, with rules where they appear

"                    : 4 4
%                    : 19
'                    : 3 3
(                    : 21
)                    : 21
*                    : 17
+                    : 15
-                    : 16 20
/                    : 18
;                    : 1 2 3 4 5 8
=                    : 1 2 3 4
BOOL                 : 13
CHAR                 : 12
CHARACTER            : 3 23
COUT                 : 5
DOUBLE               : 10
FLOAT                : 11
ID                   : 1 2 3 4 4 8 24
INSERT               : 7
INT                  : 9
NUM                  : 22
STRING               : 14
error                : 

Nonterminals, with rules where they appear

declaration          : 2 3 4 8
expression           : 1 2 7 15 15 16 16 17 17 18 18 19 19 20 21
out                  : 5 6 6
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . ID = expression ;
    (2) statement -> . declaration ID = expression ;
    (3) statement -> . declaration ID = ' CHARACTER ' ;
    (4) statement -> . declaration ID = " ID " ;
    (5) statement -> . COUT out ;
    (8) statement -> . declaration ID ;
    (9) declaration -> . INT
    (10) declaration -> . DOUBLE
    (11) declaration -> . FLOAT
    (12) declaration -> . CHAR
    (13) declaration -> . BOOL
    (14) declaration -> . STRING

    ID              shift and go to state 10
    COUT            shift and go to state 1
    INT             shift and go to state 3
    DOUBLE          shift and go to state 2
    FLOAT           shift and go to state 4
    CHAR            shift and go to state 5
    BOOL            shift and go to state 7
    STRING          shift and go to state 6

    statement                      shift and go to state 8
    declaration                    shift and go to state 9

state 1

    (5) statement -> COUT . out ;
    (6) out -> . out out
    (7) out -> . INSERT expression

    INSERT          shift and go to state 11

    out                            shift and go to state 12

state 2

    (10) declaration -> DOUBLE .

    ID              reduce using rule 10 (declaration -> DOUBLE .)


state 3

    (9) declaration -> INT .

    ID              reduce using rule 9 (declaration -> INT .)


state 4

    (11) declaration -> FLOAT .

    ID              reduce using rule 11 (declaration -> FLOAT .)


state 5

    (12) declaration -> CHAR .

    ID              reduce using rule 12 (declaration -> CHAR .)


state 6

    (14) declaration -> STRING .

    ID              reduce using rule 14 (declaration -> STRING .)


state 7

    (13) declaration -> BOOL .

    ID              reduce using rule 13 (declaration -> BOOL .)


state 8

    (0) S' -> statement .



state 9

    (2) statement -> declaration . ID = expression ;
    (3) statement -> declaration . ID = ' CHARACTER ' ;
    (4) statement -> declaration . ID = " ID " ;
    (8) statement -> declaration . ID ;

    ID              shift and go to state 13


state 10

    (1) statement -> ID . = expression ;

    =               shift and go to state 14


state 11

    (7) out -> INSERT . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression % expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . NUM
    (23) expression -> . CHARACTER
    (24) expression -> . ID

    -               shift and go to state 17
    (               shift and go to state 16
    NUM             shift and go to state 18
    CHARACTER       shift and go to state 15
    ID              shift and go to state 20

    expression                     shift and go to state 19

state 12

    (5) statement -> COUT out . ;
    (6) out -> out . out
    (6) out -> . out out
    (7) out -> . INSERT expression

    ;               shift and go to state 21
    INSERT          shift and go to state 11

    out                            shift and go to state 22

state 13

    (2) statement -> declaration ID . = expression ;
    (3) statement -> declaration ID . = ' CHARACTER ' ;
    (4) statement -> declaration ID . = " ID " ;
    (8) statement -> declaration ID . ;

    =               shift and go to state 23
    ;               shift and go to state 24


state 14

    (1) statement -> ID = . expression ;
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression % expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . NUM
    (23) expression -> . CHARACTER
    (24) expression -> . ID

    -               shift and go to state 17
    (               shift and go to state 16
    NUM             shift and go to state 18
    CHARACTER       shift and go to state 15
    ID              shift and go to state 20

    expression                     shift and go to state 25

state 15

    (23) expression -> CHARACTER .

    +               reduce using rule 23 (expression -> CHARACTER .)
    -               reduce using rule 23 (expression -> CHARACTER .)
    *               reduce using rule 23 (expression -> CHARACTER .)
    /               reduce using rule 23 (expression -> CHARACTER .)
    %               reduce using rule 23 (expression -> CHARACTER .)
    ;               reduce using rule 23 (expression -> CHARACTER .)
    INSERT          reduce using rule 23 (expression -> CHARACTER .)
    )               reduce using rule 23 (expression -> CHARACTER .)


state 16

    (21) expression -> ( . expression )
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression % expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . NUM
    (23) expression -> . CHARACTER
    (24) expression -> . ID

    -               shift and go to state 17
    (               shift and go to state 16
    NUM             shift and go to state 18
    CHARACTER       shift and go to state 15
    ID              shift and go to state 20

    expression                     shift and go to state 26

state 17

    (20) expression -> - . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression % expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . NUM
    (23) expression -> . CHARACTER
    (24) expression -> . ID

    -               shift and go to state 17
    (               shift and go to state 16
    NUM             shift and go to state 18
    CHARACTER       shift and go to state 15
    ID              shift and go to state 20

    expression                     shift and go to state 27

state 18

    (22) expression -> NUM .

    +               reduce using rule 22 (expression -> NUM .)
    -               reduce using rule 22 (expression -> NUM .)
    *               reduce using rule 22 (expression -> NUM .)
    /               reduce using rule 22 (expression -> NUM .)
    %               reduce using rule 22 (expression -> NUM .)
    ;               reduce using rule 22 (expression -> NUM .)
    INSERT          reduce using rule 22 (expression -> NUM .)
    )               reduce using rule 22 (expression -> NUM .)


state 19

    (7) out -> INSERT expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . % expression

    INSERT          reduce using rule 7 (out -> INSERT expression .)
    ;               reduce using rule 7 (out -> INSERT expression .)
    +               shift and go to state 29
    -               shift and go to state 31
    *               shift and go to state 30
    /               shift and go to state 32
    %               shift and go to state 28


state 20

    (24) expression -> ID .

    +               reduce using rule 24 (expression -> ID .)
    -               reduce using rule 24 (expression -> ID .)
    *               reduce using rule 24 (expression -> ID .)
    /               reduce using rule 24 (expression -> ID .)
    %               reduce using rule 24 (expression -> ID .)
    ;               reduce using rule 24 (expression -> ID .)
    INSERT          reduce using rule 24 (expression -> ID .)
    )               reduce using rule 24 (expression -> ID .)


state 21

    (5) statement -> COUT out ; .

    $end            reduce using rule 5 (statement -> COUT out ; .)


state 22

    (6) out -> out out .
    (6) out -> out . out
    (6) out -> . out out
    (7) out -> . INSERT expression

  ! shift/reduce conflict for INSERT resolved as shift
    ;               reduce using rule 6 (out -> out out .)
    INSERT          shift and go to state 11

  ! INSERT          [ reduce using rule 6 (out -> out out .) ]

    out                            shift and go to state 22

state 23

    (2) statement -> declaration ID = . expression ;
    (3) statement -> declaration ID = . ' CHARACTER ' ;
    (4) statement -> declaration ID = . " ID " ;
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression % expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . NUM
    (23) expression -> . CHARACTER
    (24) expression -> . ID

    '               shift and go to state 34
    "               shift and go to state 33
    -               shift and go to state 17
    (               shift and go to state 16
    NUM             shift and go to state 18
    CHARACTER       shift and go to state 15
    ID              shift and go to state 20

    expression                     shift and go to state 35

state 24

    (8) statement -> declaration ID ; .

    $end            reduce using rule 8 (statement -> declaration ID ; .)


state 25

    (1) statement -> ID = expression . ;
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . % expression

    ;               shift and go to state 36
    +               shift and go to state 29
    -               shift and go to state 31
    *               shift and go to state 30
    /               shift and go to state 32
    %               shift and go to state 28


state 26

    (21) expression -> ( expression . )
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . % expression

    )               shift and go to state 37
    +               shift and go to state 29
    -               shift and go to state 31
    *               shift and go to state 30
    /               shift and go to state 32
    %               shift and go to state 28


state 27

    (20) expression -> - expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . % expression

    +               reduce using rule 20 (expression -> - expression .)
    -               reduce using rule 20 (expression -> - expression .)
    *               reduce using rule 20 (expression -> - expression .)
    /               reduce using rule 20 (expression -> - expression .)
    %               reduce using rule 20 (expression -> - expression .)
    ;               reduce using rule 20 (expression -> - expression .)
    INSERT          reduce using rule 20 (expression -> - expression .)
    )               reduce using rule 20 (expression -> - expression .)

  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 30 ]
  ! /               [ shift and go to state 32 ]
  ! %               [ shift and go to state 28 ]


state 28

    (19) expression -> expression % . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression % expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . NUM
    (23) expression -> . CHARACTER
    (24) expression -> . ID

    -               shift and go to state 17
    (               shift and go to state 16
    NUM             shift and go to state 18
    CHARACTER       shift and go to state 15
    ID              shift and go to state 20

    expression                     shift and go to state 38

state 29

    (15) expression -> expression + . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression % expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . NUM
    (23) expression -> . CHARACTER
    (24) expression -> . ID

    -               shift and go to state 17
    (               shift and go to state 16
    NUM             shift and go to state 18
    CHARACTER       shift and go to state 15
    ID              shift and go to state 20

    expression                     shift and go to state 39

state 30

    (17) expression -> expression * . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression % expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . NUM
    (23) expression -> . CHARACTER
    (24) expression -> . ID

    -               shift and go to state 17
    (               shift and go to state 16
    NUM             shift and go to state 18
    CHARACTER       shift and go to state 15
    ID              shift and go to state 20

    expression                     shift and go to state 40

state 31

    (16) expression -> expression - . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression % expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . NUM
    (23) expression -> . CHARACTER
    (24) expression -> . ID

    -               shift and go to state 17
    (               shift and go to state 16
    NUM             shift and go to state 18
    CHARACTER       shift and go to state 15
    ID              shift and go to state 20

    expression                     shift and go to state 41

state 32

    (18) expression -> expression / . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression % expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . NUM
    (23) expression -> . CHARACTER
    (24) expression -> . ID

    -               shift and go to state 17
    (               shift and go to state 16
    NUM             shift and go to state 18
    CHARACTER       shift and go to state 15
    ID              shift and go to state 20

    expression                     shift and go to state 42

state 33

    (4) statement -> declaration ID = " . ID " ;

    ID              shift and go to state 43


state 34

    (3) statement -> declaration ID = ' . CHARACTER ' ;

    CHARACTER       shift and go to state 44


state 35

    (2) statement -> declaration ID = expression . ;
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . % expression

    ;               shift and go to state 45
    +               shift and go to state 29
    -               shift and go to state 31
    *               shift and go to state 30
    /               shift and go to state 32
    %               shift and go to state 28


state 36

    (1) statement -> ID = expression ; .

    $end            reduce using rule 1 (statement -> ID = expression ; .)


state 37

    (21) expression -> ( expression ) .

    +               reduce using rule 21 (expression -> ( expression ) .)
    -               reduce using rule 21 (expression -> ( expression ) .)
    *               reduce using rule 21 (expression -> ( expression ) .)
    /               reduce using rule 21 (expression -> ( expression ) .)
    %               reduce using rule 21 (expression -> ( expression ) .)
    ;               reduce using rule 21 (expression -> ( expression ) .)
    INSERT          reduce using rule 21 (expression -> ( expression ) .)
    )               reduce using rule 21 (expression -> ( expression ) .)


state 38

    (19) expression -> expression % expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . % expression

    +               reduce using rule 19 (expression -> expression % expression .)
    -               reduce using rule 19 (expression -> expression % expression .)
    *               reduce using rule 19 (expression -> expression % expression .)
    /               reduce using rule 19 (expression -> expression % expression .)
    %               reduce using rule 19 (expression -> expression % expression .)
    ;               reduce using rule 19 (expression -> expression % expression .)
    INSERT          reduce using rule 19 (expression -> expression % expression .)
    )               reduce using rule 19 (expression -> expression % expression .)

  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 30 ]
  ! /               [ shift and go to state 32 ]
  ! %               [ shift and go to state 28 ]


state 39

    (15) expression -> expression + expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . % expression

    +               reduce using rule 15 (expression -> expression + expression .)
    -               reduce using rule 15 (expression -> expression + expression .)
    ;               reduce using rule 15 (expression -> expression + expression .)
    INSERT          reduce using rule 15 (expression -> expression + expression .)
    )               reduce using rule 15 (expression -> expression + expression .)
    *               shift and go to state 30
    /               shift and go to state 32
    %               shift and go to state 28

  ! *               [ reduce using rule 15 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 15 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 31 ]


state 40

    (17) expression -> expression * expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . % expression

    +               reduce using rule 17 (expression -> expression * expression .)
    -               reduce using rule 17 (expression -> expression * expression .)
    *               reduce using rule 17 (expression -> expression * expression .)
    /               reduce using rule 17 (expression -> expression * expression .)
    %               reduce using rule 17 (expression -> expression * expression .)
    ;               reduce using rule 17 (expression -> expression * expression .)
    INSERT          reduce using rule 17 (expression -> expression * expression .)
    )               reduce using rule 17 (expression -> expression * expression .)

  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 30 ]
  ! /               [ shift and go to state 32 ]
  ! %               [ shift and go to state 28 ]


state 41

    (16) expression -> expression - expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . % expression

    +               reduce using rule 16 (expression -> expression - expression .)
    -               reduce using rule 16 (expression -> expression - expression .)
    ;               reduce using rule 16 (expression -> expression - expression .)
    INSERT          reduce using rule 16 (expression -> expression - expression .)
    )               reduce using rule 16 (expression -> expression - expression .)
    *               shift and go to state 30
    /               shift and go to state 32
    %               shift and go to state 28

  ! *               [ reduce using rule 16 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 16 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 31 ]


state 42

    (18) expression -> expression / expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . % expression

    +               reduce using rule 18 (expression -> expression / expression .)
    -               reduce using rule 18 (expression -> expression / expression .)
    *               reduce using rule 18 (expression -> expression / expression .)
    /               reduce using rule 18 (expression -> expression / expression .)
    %               reduce using rule 18 (expression -> expression / expression .)
    ;               reduce using rule 18 (expression -> expression / expression .)
    INSERT          reduce using rule 18 (expression -> expression / expression .)
    )               reduce using rule 18 (expression -> expression / expression .)

  ! +               [ shift and go to state 29 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 30 ]
  ! /               [ shift and go to state 32 ]
  ! %               [ shift and go to state 28 ]


state 43

    (4) statement -> declaration ID = " ID . " ;

    "               shift and go to state 46


state 44

    (3) statement -> declaration ID = ' CHARACTER . ' ;

    '               shift and go to state 47


state 45

    (2) statement -> declaration ID = expression ; .

    $end            reduce using rule 2 (statement -> declaration ID = expression ; .)


state 46

    (4) statement -> declaration ID = " ID " . ;

    ;               shift and go to state 48


state 47

    (3) statement -> declaration ID = ' CHARACTER ' . ;

    ;               shift and go to state 49


state 48

    (4) statement -> declaration ID = " ID " ; .

    $end            reduce using rule 4 (statement -> declaration ID = " ID " ; .)


state 49

    (3) statement -> declaration ID = ' CHARACTER ' ; .

    $end            reduce using rule 3 (statement -> declaration ID = ' CHARACTER ' ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INSERT in state 22 resolved as shift
