Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> ID = expression ;
Rule 2     statement -> declaration ID = expression ;
Rule 3     statement -> COUT INSERT expression ;
Rule 4     statement -> declaration ID ;
Rule 5     declaration -> INT
Rule 6     declaration -> DOUBLE
Rule 7     declaration -> FLOAT
Rule 8     declaration -> CHAR
Rule 9     declaration -> BOOL
Rule 10    expression -> expression + expression
Rule 11    expression -> expression - expression
Rule 12    expression -> expression * expression
Rule 13    expression -> expression / expression
Rule 14    expression -> - expression
Rule 15    expression -> ( expression )
Rule 16    expression -> NUM
Rule 17    expression -> CHARACTER
Rule 18    expression -> ID

Terminals, with rules where they appear

(                    : 15
)                    : 15
*                    : 12
+                    : 10
-                    : 11 14
/                    : 13
;                    : 1 2 3 4
=                    : 1 2
BOOL                 : 9
CHAR                 : 8
CHARACTER            : 17
COUT                 : 3
DOUBLE               : 6
FLOAT                : 7
ID                   : 1 2 4 18
INSERT               : 3
INT                  : 5
NUM                  : 16
error                : 

Nonterminals, with rules where they appear

declaration          : 2 4
expression           : 1 2 3 10 10 11 11 12 12 13 13 14 15
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . ID = expression ;
    (2) statement -> . declaration ID = expression ;
    (3) statement -> . COUT INSERT expression ;
    (4) statement -> . declaration ID ;
    (5) declaration -> . INT
    (6) declaration -> . DOUBLE
    (7) declaration -> . FLOAT
    (8) declaration -> . CHAR
    (9) declaration -> . BOOL

    ID              shift and go to state 9
    COUT            shift and go to state 1
    INT             shift and go to state 3
    DOUBLE          shift and go to state 2
    FLOAT           shift and go to state 4
    CHAR            shift and go to state 5
    BOOL            shift and go to state 6

    statement                      shift and go to state 7
    declaration                    shift and go to state 8

state 1

    (3) statement -> COUT . INSERT expression ;

    INSERT          shift and go to state 10


state 2

    (6) declaration -> DOUBLE .

    ID              reduce using rule 6 (declaration -> DOUBLE .)


state 3

    (5) declaration -> INT .

    ID              reduce using rule 5 (declaration -> INT .)


state 4

    (7) declaration -> FLOAT .

    ID              reduce using rule 7 (declaration -> FLOAT .)


state 5

    (8) declaration -> CHAR .

    ID              reduce using rule 8 (declaration -> CHAR .)


state 6

    (9) declaration -> BOOL .

    ID              reduce using rule 9 (declaration -> BOOL .)


state 7

    (0) S' -> statement .



state 8

    (2) statement -> declaration . ID = expression ;
    (4) statement -> declaration . ID ;

    ID              shift and go to state 11


state 9

    (1) statement -> ID . = expression ;

    =               shift and go to state 12


state 10

    (3) statement -> COUT INSERT . expression ;
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUM
    (17) expression -> . CHARACTER
    (18) expression -> . ID

    -               shift and go to state 15
    (               shift and go to state 14
    NUM             shift and go to state 16
    CHARACTER       shift and go to state 13
    ID              shift and go to state 18

    expression                     shift and go to state 17

state 11

    (2) statement -> declaration ID . = expression ;
    (4) statement -> declaration ID . ;

    =               shift and go to state 20
    ;               shift and go to state 19


state 12

    (1) statement -> ID = . expression ;
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUM
    (17) expression -> . CHARACTER
    (18) expression -> . ID

    -               shift and go to state 15
    (               shift and go to state 14
    NUM             shift and go to state 16
    CHARACTER       shift and go to state 13
    ID              shift and go to state 18

    expression                     shift and go to state 21

state 13

    (17) expression -> CHARACTER .

    )               reduce using rule 17 (expression -> CHARACTER .)
    +               reduce using rule 17 (expression -> CHARACTER .)
    -               reduce using rule 17 (expression -> CHARACTER .)
    *               reduce using rule 17 (expression -> CHARACTER .)
    /               reduce using rule 17 (expression -> CHARACTER .)
    ;               reduce using rule 17 (expression -> CHARACTER .)


state 14

    (15) expression -> ( . expression )
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUM
    (17) expression -> . CHARACTER
    (18) expression -> . ID

    -               shift and go to state 15
    (               shift and go to state 14
    NUM             shift and go to state 16
    CHARACTER       shift and go to state 13
    ID              shift and go to state 18

    expression                     shift and go to state 22

state 15

    (14) expression -> - . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUM
    (17) expression -> . CHARACTER
    (18) expression -> . ID

    -               shift and go to state 15
    (               shift and go to state 14
    NUM             shift and go to state 16
    CHARACTER       shift and go to state 13
    ID              shift and go to state 18

    expression                     shift and go to state 23

state 16

    (16) expression -> NUM .

    )               reduce using rule 16 (expression -> NUM .)
    +               reduce using rule 16 (expression -> NUM .)
    -               reduce using rule 16 (expression -> NUM .)
    *               reduce using rule 16 (expression -> NUM .)
    /               reduce using rule 16 (expression -> NUM .)
    ;               reduce using rule 16 (expression -> NUM .)


state 17

    (3) statement -> COUT INSERT expression . ;
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    ;               shift and go to state 28
    +               shift and go to state 24
    -               shift and go to state 26
    *               shift and go to state 25
    /               shift and go to state 27


state 18

    (18) expression -> ID .

    )               reduce using rule 18 (expression -> ID .)
    +               reduce using rule 18 (expression -> ID .)
    -               reduce using rule 18 (expression -> ID .)
    *               reduce using rule 18 (expression -> ID .)
    /               reduce using rule 18 (expression -> ID .)
    ;               reduce using rule 18 (expression -> ID .)


state 19

    (4) statement -> declaration ID ; .

    $end            reduce using rule 4 (statement -> declaration ID ; .)


state 20

    (2) statement -> declaration ID = . expression ;
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUM
    (17) expression -> . CHARACTER
    (18) expression -> . ID

    -               shift and go to state 15
    (               shift and go to state 14
    NUM             shift and go to state 16
    CHARACTER       shift and go to state 13
    ID              shift and go to state 18

    expression                     shift and go to state 29

state 21

    (1) statement -> ID = expression . ;
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    ;               shift and go to state 30
    +               shift and go to state 24
    -               shift and go to state 26
    *               shift and go to state 25
    /               shift and go to state 27


state 22

    (15) expression -> ( expression . )
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    )               shift and go to state 31
    +               shift and go to state 24
    -               shift and go to state 26
    *               shift and go to state 25
    /               shift and go to state 27


state 23

    (14) expression -> - expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    )               reduce using rule 14 (expression -> - expression .)
    +               reduce using rule 14 (expression -> - expression .)
    -               reduce using rule 14 (expression -> - expression .)
    *               reduce using rule 14 (expression -> - expression .)
    /               reduce using rule 14 (expression -> - expression .)
    ;               reduce using rule 14 (expression -> - expression .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 25 ]
  ! /               [ shift and go to state 27 ]


state 24

    (10) expression -> expression + . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUM
    (17) expression -> . CHARACTER
    (18) expression -> . ID

    -               shift and go to state 15
    (               shift and go to state 14
    NUM             shift and go to state 16
    CHARACTER       shift and go to state 13
    ID              shift and go to state 18

    expression                     shift and go to state 32

state 25

    (12) expression -> expression * . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUM
    (17) expression -> . CHARACTER
    (18) expression -> . ID

    -               shift and go to state 15
    (               shift and go to state 14
    NUM             shift and go to state 16
    CHARACTER       shift and go to state 13
    ID              shift and go to state 18

    expression                     shift and go to state 33

state 26

    (11) expression -> expression - . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUM
    (17) expression -> . CHARACTER
    (18) expression -> . ID

    -               shift and go to state 15
    (               shift and go to state 14
    NUM             shift and go to state 16
    CHARACTER       shift and go to state 13
    ID              shift and go to state 18

    expression                     shift and go to state 34

state 27

    (13) expression -> expression / . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUM
    (17) expression -> . CHARACTER
    (18) expression -> . ID

    -               shift and go to state 15
    (               shift and go to state 14
    NUM             shift and go to state 16
    CHARACTER       shift and go to state 13
    ID              shift and go to state 18

    expression                     shift and go to state 35

state 28

    (3) statement -> COUT INSERT expression ; .

    $end            reduce using rule 3 (statement -> COUT INSERT expression ; .)


state 29

    (2) statement -> declaration ID = expression . ;
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    ;               shift and go to state 36
    +               shift and go to state 24
    -               shift and go to state 26
    *               shift and go to state 25
    /               shift and go to state 27


state 30

    (1) statement -> ID = expression ; .

    $end            reduce using rule 1 (statement -> ID = expression ; .)


state 31

    (15) expression -> ( expression ) .

    )               reduce using rule 15 (expression -> ( expression ) .)
    +               reduce using rule 15 (expression -> ( expression ) .)
    -               reduce using rule 15 (expression -> ( expression ) .)
    *               reduce using rule 15 (expression -> ( expression ) .)
    /               reduce using rule 15 (expression -> ( expression ) .)
    ;               reduce using rule 15 (expression -> ( expression ) .)


state 32

    (10) expression -> expression + expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    )               reduce using rule 10 (expression -> expression + expression .)
    +               reduce using rule 10 (expression -> expression + expression .)
    -               reduce using rule 10 (expression -> expression + expression .)
    ;               reduce using rule 10 (expression -> expression + expression .)
    *               shift and go to state 25
    /               shift and go to state 27

  ! *               [ reduce using rule 10 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 26 ]


state 33

    (12) expression -> expression * expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    )               reduce using rule 12 (expression -> expression * expression .)
    +               reduce using rule 12 (expression -> expression * expression .)
    -               reduce using rule 12 (expression -> expression * expression .)
    *               reduce using rule 12 (expression -> expression * expression .)
    /               reduce using rule 12 (expression -> expression * expression .)
    ;               reduce using rule 12 (expression -> expression * expression .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 25 ]
  ! /               [ shift and go to state 27 ]


state 34

    (11) expression -> expression - expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    )               reduce using rule 11 (expression -> expression - expression .)
    +               reduce using rule 11 (expression -> expression - expression .)
    -               reduce using rule 11 (expression -> expression - expression .)
    ;               reduce using rule 11 (expression -> expression - expression .)
    *               shift and go to state 25
    /               shift and go to state 27

  ! *               [ reduce using rule 11 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 26 ]


state 35

    (13) expression -> expression / expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    )               reduce using rule 13 (expression -> expression / expression .)
    +               reduce using rule 13 (expression -> expression / expression .)
    -               reduce using rule 13 (expression -> expression / expression .)
    *               reduce using rule 13 (expression -> expression / expression .)
    /               reduce using rule 13 (expression -> expression / expression .)
    ;               reduce using rule 13 (expression -> expression / expression .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 25 ]
  ! /               [ shift and go to state 27 ]


state 36

    (2) statement -> declaration ID = expression ; .

    $end            reduce using rule 2 (statement -> declaration ID = expression ; .)

