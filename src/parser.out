Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> ID = expression ;
Rule 2     statement -> declaration ID = expression ;
Rule 3     statement -> declaration ID = ' CHARACTER ' ;
Rule 4     statement -> declaration ID = " ID " ;
Rule 5     statement -> COUT out ;
Rule 6     statement -> declaration ID ;
Rule 7     statement -> ID INCREMENT ;
Rule 8     out -> out out
Rule 9     out -> INSERT expression
Rule 10    declaration -> INT
Rule 11    declaration -> DOUBLE
Rule 12    declaration -> FLOAT
Rule 13    declaration -> CHAR
Rule 14    declaration -> BOOL
Rule 15    declaration -> STRING
Rule 16    expression -> expression + expression
Rule 17    expression -> expression - expression
Rule 18    expression -> expression * expression
Rule 19    expression -> expression / expression
Rule 20    expression -> expression % expression
Rule 21    expression -> - expression
Rule 22    expression -> ( expression )
Rule 23    expression -> NUM
Rule 24    expression -> CHARACTER
Rule 25    expression -> ID

Terminals, with rules where they appear

"                    : 4 4
%                    : 20
'                    : 3 3
(                    : 22
)                    : 22
*                    : 18
+                    : 16
-                    : 17 21
/                    : 19
;                    : 1 2 3 4 5 6 7
=                    : 1 2 3 4
BOOL                 : 14
CHAR                 : 13
CHARACTER            : 3 24
COUT                 : 5
DOUBLE               : 11
FLOAT                : 12
ID                   : 1 2 3 4 4 6 7 25
INCREMENT            : 7
INSERT               : 9
INT                  : 10
NUM                  : 23
STRING               : 15
error                : 

Nonterminals, with rules where they appear

declaration          : 2 3 4 6
expression           : 1 2 9 16 16 17 17 18 18 19 19 20 20 21 22
out                  : 5 8 8
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . ID = expression ;
    (2) statement -> . declaration ID = expression ;
    (3) statement -> . declaration ID = ' CHARACTER ' ;
    (4) statement -> . declaration ID = " ID " ;
    (5) statement -> . COUT out ;
    (6) statement -> . declaration ID ;
    (7) statement -> . ID INCREMENT ;
    (10) declaration -> . INT
    (11) declaration -> . DOUBLE
    (12) declaration -> . FLOAT
    (13) declaration -> . CHAR
    (14) declaration -> . BOOL
    (15) declaration -> . STRING

    ID              shift and go to state 10
    COUT            shift and go to state 1
    INT             shift and go to state 3
    DOUBLE          shift and go to state 2
    FLOAT           shift and go to state 4
    CHAR            shift and go to state 5
    BOOL            shift and go to state 7
    STRING          shift and go to state 6

    statement                      shift and go to state 8
    declaration                    shift and go to state 9

state 1

    (5) statement -> COUT . out ;
    (8) out -> . out out
    (9) out -> . INSERT expression

    INSERT          shift and go to state 11

    out                            shift and go to state 12

state 2

    (11) declaration -> DOUBLE .

    ID              reduce using rule 11 (declaration -> DOUBLE .)


state 3

    (10) declaration -> INT .

    ID              reduce using rule 10 (declaration -> INT .)


state 4

    (12) declaration -> FLOAT .

    ID              reduce using rule 12 (declaration -> FLOAT .)


state 5

    (13) declaration -> CHAR .

    ID              reduce using rule 13 (declaration -> CHAR .)


state 6

    (15) declaration -> STRING .

    ID              reduce using rule 15 (declaration -> STRING .)


state 7

    (14) declaration -> BOOL .

    ID              reduce using rule 14 (declaration -> BOOL .)


state 8

    (0) S' -> statement .



state 9

    (2) statement -> declaration . ID = expression ;
    (3) statement -> declaration . ID = ' CHARACTER ' ;
    (4) statement -> declaration . ID = " ID " ;
    (6) statement -> declaration . ID ;

    ID              shift and go to state 13


state 10

    (1) statement -> ID . = expression ;
    (7) statement -> ID . INCREMENT ;

    =               shift and go to state 14
    INCREMENT       shift and go to state 15


state 11

    (9) out -> INSERT . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression % expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . NUM
    (24) expression -> . CHARACTER
    (25) expression -> . ID

    -               shift and go to state 18
    (               shift and go to state 17
    NUM             shift and go to state 19
    CHARACTER       shift and go to state 16
    ID              shift and go to state 21

    expression                     shift and go to state 20

state 12

    (5) statement -> COUT out . ;
    (8) out -> out . out
    (8) out -> . out out
    (9) out -> . INSERT expression

    ;               shift and go to state 22
    INSERT          shift and go to state 11

    out                            shift and go to state 23

state 13

    (2) statement -> declaration ID . = expression ;
    (3) statement -> declaration ID . = ' CHARACTER ' ;
    (4) statement -> declaration ID . = " ID " ;
    (6) statement -> declaration ID . ;

    =               shift and go to state 24
    ;               shift and go to state 25


state 14

    (1) statement -> ID = . expression ;
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression % expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . NUM
    (24) expression -> . CHARACTER
    (25) expression -> . ID

    -               shift and go to state 18
    (               shift and go to state 17
    NUM             shift and go to state 19
    CHARACTER       shift and go to state 16
    ID              shift and go to state 21

    expression                     shift and go to state 26

state 15

    (7) statement -> ID INCREMENT . ;

    ;               shift and go to state 27


state 16

    (24) expression -> CHARACTER .

    +               reduce using rule 24 (expression -> CHARACTER .)
    -               reduce using rule 24 (expression -> CHARACTER .)
    *               reduce using rule 24 (expression -> CHARACTER .)
    /               reduce using rule 24 (expression -> CHARACTER .)
    %               reduce using rule 24 (expression -> CHARACTER .)
    ;               reduce using rule 24 (expression -> CHARACTER .)
    INSERT          reduce using rule 24 (expression -> CHARACTER .)
    )               reduce using rule 24 (expression -> CHARACTER .)


state 17

    (22) expression -> ( . expression )
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression % expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . NUM
    (24) expression -> . CHARACTER
    (25) expression -> . ID

    -               shift and go to state 18
    (               shift and go to state 17
    NUM             shift and go to state 19
    CHARACTER       shift and go to state 16
    ID              shift and go to state 21

    expression                     shift and go to state 28

state 18

    (21) expression -> - . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression % expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . NUM
    (24) expression -> . CHARACTER
    (25) expression -> . ID

    -               shift and go to state 18
    (               shift and go to state 17
    NUM             shift and go to state 19
    CHARACTER       shift and go to state 16
    ID              shift and go to state 21

    expression                     shift and go to state 29

state 19

    (23) expression -> NUM .

    +               reduce using rule 23 (expression -> NUM .)
    -               reduce using rule 23 (expression -> NUM .)
    *               reduce using rule 23 (expression -> NUM .)
    /               reduce using rule 23 (expression -> NUM .)
    %               reduce using rule 23 (expression -> NUM .)
    ;               reduce using rule 23 (expression -> NUM .)
    INSERT          reduce using rule 23 (expression -> NUM .)
    )               reduce using rule 23 (expression -> NUM .)


state 20

    (9) out -> INSERT expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . % expression

    INSERT          reduce using rule 9 (out -> INSERT expression .)
    ;               reduce using rule 9 (out -> INSERT expression .)
    +               shift and go to state 31
    -               shift and go to state 33
    *               shift and go to state 32
    /               shift and go to state 34
    %               shift and go to state 30


state 21

    (25) expression -> ID .

    +               reduce using rule 25 (expression -> ID .)
    -               reduce using rule 25 (expression -> ID .)
    *               reduce using rule 25 (expression -> ID .)
    /               reduce using rule 25 (expression -> ID .)
    %               reduce using rule 25 (expression -> ID .)
    ;               reduce using rule 25 (expression -> ID .)
    INSERT          reduce using rule 25 (expression -> ID .)
    )               reduce using rule 25 (expression -> ID .)


state 22

    (5) statement -> COUT out ; .

    $end            reduce using rule 5 (statement -> COUT out ; .)


state 23

    (8) out -> out out .
    (8) out -> out . out
    (8) out -> . out out
    (9) out -> . INSERT expression

  ! shift/reduce conflict for INSERT resolved as shift
    ;               reduce using rule 8 (out -> out out .)
    INSERT          shift and go to state 11

  ! INSERT          [ reduce using rule 8 (out -> out out .) ]

    out                            shift and go to state 23

state 24

    (2) statement -> declaration ID = . expression ;
    (3) statement -> declaration ID = . ' CHARACTER ' ;
    (4) statement -> declaration ID = . " ID " ;
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression % expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . NUM
    (24) expression -> . CHARACTER
    (25) expression -> . ID

    '               shift and go to state 36
    "               shift and go to state 35
    -               shift and go to state 18
    (               shift and go to state 17
    NUM             shift and go to state 19
    CHARACTER       shift and go to state 16
    ID              shift and go to state 21

    expression                     shift and go to state 37

state 25

    (6) statement -> declaration ID ; .

    $end            reduce using rule 6 (statement -> declaration ID ; .)


state 26

    (1) statement -> ID = expression . ;
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . % expression

    ;               shift and go to state 38
    +               shift and go to state 31
    -               shift and go to state 33
    *               shift and go to state 32
    /               shift and go to state 34
    %               shift and go to state 30


state 27

    (7) statement -> ID INCREMENT ; .

    $end            reduce using rule 7 (statement -> ID INCREMENT ; .)


state 28

    (22) expression -> ( expression . )
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . % expression

    )               shift and go to state 39
    +               shift and go to state 31
    -               shift and go to state 33
    *               shift and go to state 32
    /               shift and go to state 34
    %               shift and go to state 30


state 29

    (21) expression -> - expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . % expression

    +               reduce using rule 21 (expression -> - expression .)
    -               reduce using rule 21 (expression -> - expression .)
    *               reduce using rule 21 (expression -> - expression .)
    /               reduce using rule 21 (expression -> - expression .)
    %               reduce using rule 21 (expression -> - expression .)
    ;               reduce using rule 21 (expression -> - expression .)
    INSERT          reduce using rule 21 (expression -> - expression .)
    )               reduce using rule 21 (expression -> - expression .)

  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 33 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 34 ]
  ! %               [ shift and go to state 30 ]


state 30

    (20) expression -> expression % . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression % expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . NUM
    (24) expression -> . CHARACTER
    (25) expression -> . ID

    -               shift and go to state 18
    (               shift and go to state 17
    NUM             shift and go to state 19
    CHARACTER       shift and go to state 16
    ID              shift and go to state 21

    expression                     shift and go to state 40

state 31

    (16) expression -> expression + . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression % expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . NUM
    (24) expression -> . CHARACTER
    (25) expression -> . ID

    -               shift and go to state 18
    (               shift and go to state 17
    NUM             shift and go to state 19
    CHARACTER       shift and go to state 16
    ID              shift and go to state 21

    expression                     shift and go to state 41

state 32

    (18) expression -> expression * . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression % expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . NUM
    (24) expression -> . CHARACTER
    (25) expression -> . ID

    -               shift and go to state 18
    (               shift and go to state 17
    NUM             shift and go to state 19
    CHARACTER       shift and go to state 16
    ID              shift and go to state 21

    expression                     shift and go to state 42

state 33

    (17) expression -> expression - . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression % expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . NUM
    (24) expression -> . CHARACTER
    (25) expression -> . ID

    -               shift and go to state 18
    (               shift and go to state 17
    NUM             shift and go to state 19
    CHARACTER       shift and go to state 16
    ID              shift and go to state 21

    expression                     shift and go to state 43

state 34

    (19) expression -> expression / . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression % expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . NUM
    (24) expression -> . CHARACTER
    (25) expression -> . ID

    -               shift and go to state 18
    (               shift and go to state 17
    NUM             shift and go to state 19
    CHARACTER       shift and go to state 16
    ID              shift and go to state 21

    expression                     shift and go to state 44

state 35

    (4) statement -> declaration ID = " . ID " ;

    ID              shift and go to state 45


state 36

    (3) statement -> declaration ID = ' . CHARACTER ' ;

    CHARACTER       shift and go to state 46


state 37

    (2) statement -> declaration ID = expression . ;
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . % expression

    ;               shift and go to state 47
    +               shift and go to state 31
    -               shift and go to state 33
    *               shift and go to state 32
    /               shift and go to state 34
    %               shift and go to state 30


state 38

    (1) statement -> ID = expression ; .

    $end            reduce using rule 1 (statement -> ID = expression ; .)


state 39

    (22) expression -> ( expression ) .

    +               reduce using rule 22 (expression -> ( expression ) .)
    -               reduce using rule 22 (expression -> ( expression ) .)
    *               reduce using rule 22 (expression -> ( expression ) .)
    /               reduce using rule 22 (expression -> ( expression ) .)
    %               reduce using rule 22 (expression -> ( expression ) .)
    ;               reduce using rule 22 (expression -> ( expression ) .)
    INSERT          reduce using rule 22 (expression -> ( expression ) .)
    )               reduce using rule 22 (expression -> ( expression ) .)


state 40

    (20) expression -> expression % expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . % expression

    +               reduce using rule 20 (expression -> expression % expression .)
    -               reduce using rule 20 (expression -> expression % expression .)
    *               reduce using rule 20 (expression -> expression % expression .)
    /               reduce using rule 20 (expression -> expression % expression .)
    %               reduce using rule 20 (expression -> expression % expression .)
    ;               reduce using rule 20 (expression -> expression % expression .)
    INSERT          reduce using rule 20 (expression -> expression % expression .)
    )               reduce using rule 20 (expression -> expression % expression .)

  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 33 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 34 ]
  ! %               [ shift and go to state 30 ]


state 41

    (16) expression -> expression + expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . % expression

    +               reduce using rule 16 (expression -> expression + expression .)
    -               reduce using rule 16 (expression -> expression + expression .)
    ;               reduce using rule 16 (expression -> expression + expression .)
    INSERT          reduce using rule 16 (expression -> expression + expression .)
    )               reduce using rule 16 (expression -> expression + expression .)
    *               shift and go to state 32
    /               shift and go to state 34
    %               shift and go to state 30

  ! *               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 33 ]


state 42

    (18) expression -> expression * expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . % expression

    +               reduce using rule 18 (expression -> expression * expression .)
    -               reduce using rule 18 (expression -> expression * expression .)
    *               reduce using rule 18 (expression -> expression * expression .)
    /               reduce using rule 18 (expression -> expression * expression .)
    %               reduce using rule 18 (expression -> expression * expression .)
    ;               reduce using rule 18 (expression -> expression * expression .)
    INSERT          reduce using rule 18 (expression -> expression * expression .)
    )               reduce using rule 18 (expression -> expression * expression .)

  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 33 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 34 ]
  ! %               [ shift and go to state 30 ]


state 43

    (17) expression -> expression - expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . % expression

    +               reduce using rule 17 (expression -> expression - expression .)
    -               reduce using rule 17 (expression -> expression - expression .)
    ;               reduce using rule 17 (expression -> expression - expression .)
    INSERT          reduce using rule 17 (expression -> expression - expression .)
    )               reduce using rule 17 (expression -> expression - expression .)
    *               shift and go to state 32
    /               shift and go to state 34
    %               shift and go to state 30

  ! *               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 33 ]


state 44

    (19) expression -> expression / expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . % expression

    +               reduce using rule 19 (expression -> expression / expression .)
    -               reduce using rule 19 (expression -> expression / expression .)
    *               reduce using rule 19 (expression -> expression / expression .)
    /               reduce using rule 19 (expression -> expression / expression .)
    %               reduce using rule 19 (expression -> expression / expression .)
    ;               reduce using rule 19 (expression -> expression / expression .)
    INSERT          reduce using rule 19 (expression -> expression / expression .)
    )               reduce using rule 19 (expression -> expression / expression .)

  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 33 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 34 ]
  ! %               [ shift and go to state 30 ]


state 45

    (4) statement -> declaration ID = " ID . " ;

    "               shift and go to state 48


state 46

    (3) statement -> declaration ID = ' CHARACTER . ' ;

    '               shift and go to state 49


state 47

    (2) statement -> declaration ID = expression ; .

    $end            reduce using rule 2 (statement -> declaration ID = expression ; .)


state 48

    (4) statement -> declaration ID = " ID " . ;

    ;               shift and go to state 50


state 49

    (3) statement -> declaration ID = ' CHARACTER ' . ;

    ;               shift and go to state 51


state 50

    (4) statement -> declaration ID = " ID " ; .

    $end            reduce using rule 4 (statement -> declaration ID = " ID " ; .)


state 51

    (3) statement -> declaration ID = ' CHARACTER ' ; .

    $end            reduce using rule 3 (statement -> declaration ID = ' CHARACTER ' ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INSERT in state 23 resolved as shift
