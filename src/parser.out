Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> ID = expression ;
Rule 2     statement -> ID PLUSEQUAL expression ;
Rule 3     statement -> ID MINUSEQUAL expression ;
Rule 4     statement -> declaration ID = expression ;
Rule 5     statement -> declaration ID = ' CHARACTER ' ;
Rule 6     statement -> declaration ID = " ID " ;
Rule 7     statement -> COUT out ;
Rule 8     statement -> declaration ID ;
Rule 9     statement -> ID INCREMENT ;
Rule 10    statement -> ID DECREMENT ;
Rule 11    out -> out out
Rule 12    out -> INSERT " ID "
Rule 13    out -> INSERT ' CHARACTER '
Rule 14    out -> INSERT expression
Rule 15    declaration -> INT
Rule 16    declaration -> DOUBLE
Rule 17    declaration -> FLOAT
Rule 18    declaration -> CHAR
Rule 19    declaration -> BOOL
Rule 20    declaration -> STRING
Rule 21    expression -> expression + expression
Rule 22    expression -> expression - expression
Rule 23    expression -> expression * expression
Rule 24    expression -> expression / expression
Rule 25    expression -> expression % expression
Rule 26    expression -> - expression
Rule 27    expression -> ( expression )
Rule 28    expression -> NUM
Rule 29    expression -> CHARACTER
Rule 30    expression -> ID

Terminals, with rules where they appear

"                    : 6 6 12 12
%                    : 25
'                    : 5 5 13 13
(                    : 27
)                    : 27
*                    : 23
+                    : 21
-                    : 22 26
/                    : 24
;                    : 1 2 3 4 5 6 7 8 9 10
=                    : 1 4 5 6
BOOL                 : 19
CHAR                 : 18
CHARACTER            : 5 13 29
COUT                 : 7
DECREMENT            : 10
DOUBLE               : 16
FLOAT                : 17
ID                   : 1 2 3 4 5 6 6 8 9 10 12 30
INCREMENT            : 9
INSERT               : 12 13 14
INT                  : 15
MINUSEQUAL           : 3
NUM                  : 28
PLUSEQUAL            : 2
STRING               : 20
error                : 

Nonterminals, with rules where they appear

declaration          : 4 5 6 8
expression           : 1 2 3 4 14 21 21 22 22 23 23 24 24 25 25 26 27
out                  : 7 11 11
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . ID = expression ;
    (2) statement -> . ID PLUSEQUAL expression ;
    (3) statement -> . ID MINUSEQUAL expression ;
    (4) statement -> . declaration ID = expression ;
    (5) statement -> . declaration ID = ' CHARACTER ' ;
    (6) statement -> . declaration ID = " ID " ;
    (7) statement -> . COUT out ;
    (8) statement -> . declaration ID ;
    (9) statement -> . ID INCREMENT ;
    (10) statement -> . ID DECREMENT ;
    (15) declaration -> . INT
    (16) declaration -> . DOUBLE
    (17) declaration -> . FLOAT
    (18) declaration -> . CHAR
    (19) declaration -> . BOOL
    (20) declaration -> . STRING

    ID              shift and go to state 10
    COUT            shift and go to state 1
    INT             shift and go to state 3
    DOUBLE          shift and go to state 2
    FLOAT           shift and go to state 4
    CHAR            shift and go to state 5
    BOOL            shift and go to state 7
    STRING          shift and go to state 6

    statement                      shift and go to state 8
    declaration                    shift and go to state 9

state 1

    (7) statement -> COUT . out ;
    (11) out -> . out out
    (12) out -> . INSERT " ID "
    (13) out -> . INSERT ' CHARACTER '
    (14) out -> . INSERT expression

    INSERT          shift and go to state 11

    out                            shift and go to state 12

state 2

    (16) declaration -> DOUBLE .

    ID              reduce using rule 16 (declaration -> DOUBLE .)


state 3

    (15) declaration -> INT .

    ID              reduce using rule 15 (declaration -> INT .)


state 4

    (17) declaration -> FLOAT .

    ID              reduce using rule 17 (declaration -> FLOAT .)


state 5

    (18) declaration -> CHAR .

    ID              reduce using rule 18 (declaration -> CHAR .)


state 6

    (20) declaration -> STRING .

    ID              reduce using rule 20 (declaration -> STRING .)


state 7

    (19) declaration -> BOOL .

    ID              reduce using rule 19 (declaration -> BOOL .)


state 8

    (0) S' -> statement .



state 9

    (4) statement -> declaration . ID = expression ;
    (5) statement -> declaration . ID = ' CHARACTER ' ;
    (6) statement -> declaration . ID = " ID " ;
    (8) statement -> declaration . ID ;

    ID              shift and go to state 13


state 10

    (1) statement -> ID . = expression ;
    (2) statement -> ID . PLUSEQUAL expression ;
    (3) statement -> ID . MINUSEQUAL expression ;
    (9) statement -> ID . INCREMENT ;
    (10) statement -> ID . DECREMENT ;

    =               shift and go to state 14
    PLUSEQUAL       shift and go to state 17
    MINUSEQUAL      shift and go to state 15
    INCREMENT       shift and go to state 18
    DECREMENT       shift and go to state 16


state 11

    (12) out -> INSERT . " ID "
    (13) out -> INSERT . ' CHARACTER '
    (14) out -> INSERT . expression
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression % expression
    (26) expression -> . - expression
    (27) expression -> . ( expression )
    (28) expression -> . NUM
    (29) expression -> . CHARACTER
    (30) expression -> . ID

    "               shift and go to state 19
    '               shift and go to state 20
    -               shift and go to state 21
    (               shift and go to state 24
    NUM             shift and go to state 23
    CHARACTER       shift and go to state 22
    ID              shift and go to state 26

    expression                     shift and go to state 25

state 12

    (7) statement -> COUT out . ;
    (11) out -> out . out
    (11) out -> . out out
    (12) out -> . INSERT " ID "
    (13) out -> . INSERT ' CHARACTER '
    (14) out -> . INSERT expression

    ;               shift and go to state 27
    INSERT          shift and go to state 11

    out                            shift and go to state 28

state 13

    (4) statement -> declaration ID . = expression ;
    (5) statement -> declaration ID . = ' CHARACTER ' ;
    (6) statement -> declaration ID . = " ID " ;
    (8) statement -> declaration ID . ;

    =               shift and go to state 29
    ;               shift and go to state 30


state 14

    (1) statement -> ID = . expression ;
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression % expression
    (26) expression -> . - expression
    (27) expression -> . ( expression )
    (28) expression -> . NUM
    (29) expression -> . CHARACTER
    (30) expression -> . ID

    -               shift and go to state 21
    (               shift and go to state 24
    NUM             shift and go to state 23
    CHARACTER       shift and go to state 22
    ID              shift and go to state 26

    expression                     shift and go to state 31

state 15

    (3) statement -> ID MINUSEQUAL . expression ;
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression % expression
    (26) expression -> . - expression
    (27) expression -> . ( expression )
    (28) expression -> . NUM
    (29) expression -> . CHARACTER
    (30) expression -> . ID

    -               shift and go to state 21
    (               shift and go to state 24
    NUM             shift and go to state 23
    CHARACTER       shift and go to state 22
    ID              shift and go to state 26

    expression                     shift and go to state 32

state 16

    (10) statement -> ID DECREMENT . ;

    ;               shift and go to state 33


state 17

    (2) statement -> ID PLUSEQUAL . expression ;
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression % expression
    (26) expression -> . - expression
    (27) expression -> . ( expression )
    (28) expression -> . NUM
    (29) expression -> . CHARACTER
    (30) expression -> . ID

    -               shift and go to state 21
    (               shift and go to state 24
    NUM             shift and go to state 23
    CHARACTER       shift and go to state 22
    ID              shift and go to state 26

    expression                     shift and go to state 34

state 18

    (9) statement -> ID INCREMENT . ;

    ;               shift and go to state 35


state 19

    (12) out -> INSERT " . ID "

    ID              shift and go to state 36


state 20

    (13) out -> INSERT ' . CHARACTER '

    CHARACTER       shift and go to state 37


state 21

    (26) expression -> - . expression
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression % expression
    (26) expression -> . - expression
    (27) expression -> . ( expression )
    (28) expression -> . NUM
    (29) expression -> . CHARACTER
    (30) expression -> . ID

    -               shift and go to state 21
    (               shift and go to state 24
    NUM             shift and go to state 23
    CHARACTER       shift and go to state 22
    ID              shift and go to state 26

    expression                     shift and go to state 38

state 22

    (29) expression -> CHARACTER .

    ;               reduce using rule 29 (expression -> CHARACTER .)
    +               reduce using rule 29 (expression -> CHARACTER .)
    -               reduce using rule 29 (expression -> CHARACTER .)
    *               reduce using rule 29 (expression -> CHARACTER .)
    /               reduce using rule 29 (expression -> CHARACTER .)
    %               reduce using rule 29 (expression -> CHARACTER .)
    INSERT          reduce using rule 29 (expression -> CHARACTER .)
    )               reduce using rule 29 (expression -> CHARACTER .)


state 23

    (28) expression -> NUM .

    ;               reduce using rule 28 (expression -> NUM .)
    +               reduce using rule 28 (expression -> NUM .)
    -               reduce using rule 28 (expression -> NUM .)
    *               reduce using rule 28 (expression -> NUM .)
    /               reduce using rule 28 (expression -> NUM .)
    %               reduce using rule 28 (expression -> NUM .)
    INSERT          reduce using rule 28 (expression -> NUM .)
    )               reduce using rule 28 (expression -> NUM .)


state 24

    (27) expression -> ( . expression )
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression % expression
    (26) expression -> . - expression
    (27) expression -> . ( expression )
    (28) expression -> . NUM
    (29) expression -> . CHARACTER
    (30) expression -> . ID

    -               shift and go to state 21
    (               shift and go to state 24
    NUM             shift and go to state 23
    CHARACTER       shift and go to state 22
    ID              shift and go to state 26

    expression                     shift and go to state 39

state 25

    (14) out -> INSERT expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . % expression

    INSERT          reduce using rule 14 (out -> INSERT expression .)
    ;               reduce using rule 14 (out -> INSERT expression .)
    +               shift and go to state 41
    -               shift and go to state 43
    *               shift and go to state 42
    /               shift and go to state 44
    %               shift and go to state 40


state 26

    (30) expression -> ID .

    ;               reduce using rule 30 (expression -> ID .)
    +               reduce using rule 30 (expression -> ID .)
    -               reduce using rule 30 (expression -> ID .)
    *               reduce using rule 30 (expression -> ID .)
    /               reduce using rule 30 (expression -> ID .)
    %               reduce using rule 30 (expression -> ID .)
    INSERT          reduce using rule 30 (expression -> ID .)
    )               reduce using rule 30 (expression -> ID .)


state 27

    (7) statement -> COUT out ; .

    $end            reduce using rule 7 (statement -> COUT out ; .)


state 28

    (11) out -> out out .
    (11) out -> out . out
    (11) out -> . out out
    (12) out -> . INSERT " ID "
    (13) out -> . INSERT ' CHARACTER '
    (14) out -> . INSERT expression

  ! shift/reduce conflict for INSERT resolved as shift
    ;               reduce using rule 11 (out -> out out .)
    INSERT          shift and go to state 11

  ! INSERT          [ reduce using rule 11 (out -> out out .) ]

    out                            shift and go to state 28

state 29

    (4) statement -> declaration ID = . expression ;
    (5) statement -> declaration ID = . ' CHARACTER ' ;
    (6) statement -> declaration ID = . " ID " ;
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression % expression
    (26) expression -> . - expression
    (27) expression -> . ( expression )
    (28) expression -> . NUM
    (29) expression -> . CHARACTER
    (30) expression -> . ID

    '               shift and go to state 46
    "               shift and go to state 45
    -               shift and go to state 21
    (               shift and go to state 24
    NUM             shift and go to state 23
    CHARACTER       shift and go to state 22
    ID              shift and go to state 26

    expression                     shift and go to state 47

state 30

    (8) statement -> declaration ID ; .

    $end            reduce using rule 8 (statement -> declaration ID ; .)


state 31

    (1) statement -> ID = expression . ;
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . % expression

    ;               shift and go to state 48
    +               shift and go to state 41
    -               shift and go to state 43
    *               shift and go to state 42
    /               shift and go to state 44
    %               shift and go to state 40


state 32

    (3) statement -> ID MINUSEQUAL expression . ;
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . % expression

    ;               shift and go to state 49
    +               shift and go to state 41
    -               shift and go to state 43
    *               shift and go to state 42
    /               shift and go to state 44
    %               shift and go to state 40


state 33

    (10) statement -> ID DECREMENT ; .

    $end            reduce using rule 10 (statement -> ID DECREMENT ; .)


state 34

    (2) statement -> ID PLUSEQUAL expression . ;
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . % expression

    ;               shift and go to state 50
    +               shift and go to state 41
    -               shift and go to state 43
    *               shift and go to state 42
    /               shift and go to state 44
    %               shift and go to state 40


state 35

    (9) statement -> ID INCREMENT ; .

    $end            reduce using rule 9 (statement -> ID INCREMENT ; .)


state 36

    (12) out -> INSERT " ID . "

    "               shift and go to state 51


state 37

    (13) out -> INSERT ' CHARACTER . '

    '               shift and go to state 52


state 38

    (26) expression -> - expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . % expression

    ;               reduce using rule 26 (expression -> - expression .)
    +               reduce using rule 26 (expression -> - expression .)
    -               reduce using rule 26 (expression -> - expression .)
    *               reduce using rule 26 (expression -> - expression .)
    /               reduce using rule 26 (expression -> - expression .)
    %               reduce using rule 26 (expression -> - expression .)
    INSERT          reduce using rule 26 (expression -> - expression .)
    )               reduce using rule 26 (expression -> - expression .)

  ! +               [ shift and go to state 41 ]
  ! -               [ shift and go to state 43 ]
  ! *               [ shift and go to state 42 ]
  ! /               [ shift and go to state 44 ]
  ! %               [ shift and go to state 40 ]


state 39

    (27) expression -> ( expression . )
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . % expression

    )               shift and go to state 53
    +               shift and go to state 41
    -               shift and go to state 43
    *               shift and go to state 42
    /               shift and go to state 44
    %               shift and go to state 40


state 40

    (25) expression -> expression % . expression
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression % expression
    (26) expression -> . - expression
    (27) expression -> . ( expression )
    (28) expression -> . NUM
    (29) expression -> . CHARACTER
    (30) expression -> . ID

    -               shift and go to state 21
    (               shift and go to state 24
    NUM             shift and go to state 23
    CHARACTER       shift and go to state 22
    ID              shift and go to state 26

    expression                     shift and go to state 54

state 41

    (21) expression -> expression + . expression
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression % expression
    (26) expression -> . - expression
    (27) expression -> . ( expression )
    (28) expression -> . NUM
    (29) expression -> . CHARACTER
    (30) expression -> . ID

    -               shift and go to state 21
    (               shift and go to state 24
    NUM             shift and go to state 23
    CHARACTER       shift and go to state 22
    ID              shift and go to state 26

    expression                     shift and go to state 55

state 42

    (23) expression -> expression * . expression
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression % expression
    (26) expression -> . - expression
    (27) expression -> . ( expression )
    (28) expression -> . NUM
    (29) expression -> . CHARACTER
    (30) expression -> . ID

    -               shift and go to state 21
    (               shift and go to state 24
    NUM             shift and go to state 23
    CHARACTER       shift and go to state 22
    ID              shift and go to state 26

    expression                     shift and go to state 56

state 43

    (22) expression -> expression - . expression
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression % expression
    (26) expression -> . - expression
    (27) expression -> . ( expression )
    (28) expression -> . NUM
    (29) expression -> . CHARACTER
    (30) expression -> . ID

    -               shift and go to state 21
    (               shift and go to state 24
    NUM             shift and go to state 23
    CHARACTER       shift and go to state 22
    ID              shift and go to state 26

    expression                     shift and go to state 57

state 44

    (24) expression -> expression / . expression
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression % expression
    (26) expression -> . - expression
    (27) expression -> . ( expression )
    (28) expression -> . NUM
    (29) expression -> . CHARACTER
    (30) expression -> . ID

    -               shift and go to state 21
    (               shift and go to state 24
    NUM             shift and go to state 23
    CHARACTER       shift and go to state 22
    ID              shift and go to state 26

    expression                     shift and go to state 58

state 45

    (6) statement -> declaration ID = " . ID " ;

    ID              shift and go to state 59


state 46

    (5) statement -> declaration ID = ' . CHARACTER ' ;

    CHARACTER       shift and go to state 60


state 47

    (4) statement -> declaration ID = expression . ;
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . % expression

    ;               shift and go to state 61
    +               shift and go to state 41
    -               shift and go to state 43
    *               shift and go to state 42
    /               shift and go to state 44
    %               shift and go to state 40


state 48

    (1) statement -> ID = expression ; .

    $end            reduce using rule 1 (statement -> ID = expression ; .)


state 49

    (3) statement -> ID MINUSEQUAL expression ; .

    $end            reduce using rule 3 (statement -> ID MINUSEQUAL expression ; .)


state 50

    (2) statement -> ID PLUSEQUAL expression ; .

    $end            reduce using rule 2 (statement -> ID PLUSEQUAL expression ; .)


state 51

    (12) out -> INSERT " ID " .

    INSERT          reduce using rule 12 (out -> INSERT " ID " .)
    ;               reduce using rule 12 (out -> INSERT " ID " .)


state 52

    (13) out -> INSERT ' CHARACTER ' .

    INSERT          reduce using rule 13 (out -> INSERT ' CHARACTER ' .)
    ;               reduce using rule 13 (out -> INSERT ' CHARACTER ' .)


state 53

    (27) expression -> ( expression ) .

    ;               reduce using rule 27 (expression -> ( expression ) .)
    +               reduce using rule 27 (expression -> ( expression ) .)
    -               reduce using rule 27 (expression -> ( expression ) .)
    *               reduce using rule 27 (expression -> ( expression ) .)
    /               reduce using rule 27 (expression -> ( expression ) .)
    %               reduce using rule 27 (expression -> ( expression ) .)
    INSERT          reduce using rule 27 (expression -> ( expression ) .)
    )               reduce using rule 27 (expression -> ( expression ) .)


state 54

    (25) expression -> expression % expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . % expression

    ;               reduce using rule 25 (expression -> expression % expression .)
    +               reduce using rule 25 (expression -> expression % expression .)
    -               reduce using rule 25 (expression -> expression % expression .)
    *               reduce using rule 25 (expression -> expression % expression .)
    /               reduce using rule 25 (expression -> expression % expression .)
    %               reduce using rule 25 (expression -> expression % expression .)
    INSERT          reduce using rule 25 (expression -> expression % expression .)
    )               reduce using rule 25 (expression -> expression % expression .)

  ! +               [ shift and go to state 41 ]
  ! -               [ shift and go to state 43 ]
  ! *               [ shift and go to state 42 ]
  ! /               [ shift and go to state 44 ]
  ! %               [ shift and go to state 40 ]


state 55

    (21) expression -> expression + expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . % expression

    ;               reduce using rule 21 (expression -> expression + expression .)
    +               reduce using rule 21 (expression -> expression + expression .)
    -               reduce using rule 21 (expression -> expression + expression .)
    INSERT          reduce using rule 21 (expression -> expression + expression .)
    )               reduce using rule 21 (expression -> expression + expression .)
    *               shift and go to state 42
    /               shift and go to state 44
    %               shift and go to state 40

  ! *               [ reduce using rule 21 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 21 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 21 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 41 ]
  ! -               [ shift and go to state 43 ]


state 56

    (23) expression -> expression * expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . % expression

    ;               reduce using rule 23 (expression -> expression * expression .)
    +               reduce using rule 23 (expression -> expression * expression .)
    -               reduce using rule 23 (expression -> expression * expression .)
    *               reduce using rule 23 (expression -> expression * expression .)
    /               reduce using rule 23 (expression -> expression * expression .)
    %               reduce using rule 23 (expression -> expression * expression .)
    INSERT          reduce using rule 23 (expression -> expression * expression .)
    )               reduce using rule 23 (expression -> expression * expression .)

  ! +               [ shift and go to state 41 ]
  ! -               [ shift and go to state 43 ]
  ! *               [ shift and go to state 42 ]
  ! /               [ shift and go to state 44 ]
  ! %               [ shift and go to state 40 ]


state 57

    (22) expression -> expression - expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . % expression

    ;               reduce using rule 22 (expression -> expression - expression .)
    +               reduce using rule 22 (expression -> expression - expression .)
    -               reduce using rule 22 (expression -> expression - expression .)
    INSERT          reduce using rule 22 (expression -> expression - expression .)
    )               reduce using rule 22 (expression -> expression - expression .)
    *               shift and go to state 42
    /               shift and go to state 44
    %               shift and go to state 40

  ! *               [ reduce using rule 22 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 22 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 22 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 41 ]
  ! -               [ shift and go to state 43 ]


state 58

    (24) expression -> expression / expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . % expression

    ;               reduce using rule 24 (expression -> expression / expression .)
    +               reduce using rule 24 (expression -> expression / expression .)
    -               reduce using rule 24 (expression -> expression / expression .)
    *               reduce using rule 24 (expression -> expression / expression .)
    /               reduce using rule 24 (expression -> expression / expression .)
    %               reduce using rule 24 (expression -> expression / expression .)
    INSERT          reduce using rule 24 (expression -> expression / expression .)
    )               reduce using rule 24 (expression -> expression / expression .)

  ! +               [ shift and go to state 41 ]
  ! -               [ shift and go to state 43 ]
  ! *               [ shift and go to state 42 ]
  ! /               [ shift and go to state 44 ]
  ! %               [ shift and go to state 40 ]


state 59

    (6) statement -> declaration ID = " ID . " ;

    "               shift and go to state 62


state 60

    (5) statement -> declaration ID = ' CHARACTER . ' ;

    '               shift and go to state 63


state 61

    (4) statement -> declaration ID = expression ; .

    $end            reduce using rule 4 (statement -> declaration ID = expression ; .)


state 62

    (6) statement -> declaration ID = " ID " . ;

    ;               shift and go to state 64


state 63

    (5) statement -> declaration ID = ' CHARACTER ' . ;

    ;               shift and go to state 65


state 64

    (6) statement -> declaration ID = " ID " ; .

    $end            reduce using rule 6 (statement -> declaration ID = " ID " ; .)


state 65

    (5) statement -> declaration ID = ' CHARACTER ' ; .

    $end            reduce using rule 5 (statement -> declaration ID = ' CHARACTER ' ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INSERT in state 28 resolved as shift
